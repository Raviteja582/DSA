{
	// Place your cpp workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"DEB": {
		"scope": "cpp",
		"prefix": "DEB",
		"body": [
			"#define debarr(a, n)  cout << #a << \" : \"; for (int i = 0; i < n; i++) cerr << a[i] << \" \";cerr << endl;",
			"#define debmat(mat, row, col) cout << #mat << \" :\\n\"; for (int i = 0; i < row; i++) { for (int j = 0; j < col; j++) cerr << mat[i][j] << \" \"; cerr << endl;}",
			"#define pr(...) dbs(#__VA_ARGS__, __VA_ARGS__)",
			"template <class S, class T> ostream &operator<<(ostream &os, const pair<S, T> &p) { return os << \"(\" << p.first << \", \" << p.second << \")\";}",
			"template <class T> ostream &operator<<(ostream &os, const vector<T> &p) {os << \"[ \";for (const auto &it : p)os << it << \" \";return os << \"]\"<<endl;}",
			"template <class T> ostream &operator<<(ostream &os, const unordered_set<T> &p) {os << \"[ \";for (const auto &it : p)os << it << \" \";return os << \"]\" <<endl;}",
			"template <class S, class T> ostream &operator<<(ostream &os, const unordered_map<S, T> &p) {os << \"[ \";for (const auto &it : p)os << it << \" \";return os << \"]\" << endl;}",
			"template <class T> ostream &operator<<(ostream &os, const set<T> &p) {os << \"[ \";for (const auto &it : p)os << it << \" \";return os << \"]\" << endl;}",
			"template <class T> ostream &operator<<(ostream &os, const multiset<T> &p) {os << \"[ \";for (const auto &it : p)os << it << \" \";return os << \"]\" << endl;}",
			"template <class S, class T> ostream &operator<<(ostream &os, const map<S, T> &p) {os << \"[ \";for (const auto &it : p)os << it << \" \";return os << \"]\" << endl;}",
			"template <class T> void dbs(const string &str, T t) {cerr << str << \" : \" << t << \"\\n\";}",
			"template <class T, class... S> void dbs(string str, T t, S... s) {int idx = str.find(',');cerr << str.substr(0, idx) << \" : \" << t << \",\";dbs(str.substr(idx + 1), s...);}",
			"template <class T> void prc(T a, T b) {cerr << \"[\";for (T i = a; i != b; ++i) {if (i != a)cerr << \", \";cerr << *i;}cerr << \"]\\n\";}",
		]
	}
}